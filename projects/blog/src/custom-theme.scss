@use 'sass:map';
@use '@angular/material' as mat;
@use './app/blog/blog.component-theme' as blog;

@include mat.core();

// light theme
$light-primary: mat.define-palette(mat.$cyan-palette);
$light-accent: mat.define-palette(mat.$cyan-palette, A200, A100, A400);
// Define a dark theme
$dark-primary: mat.define-palette(mat.$indigo-palette);
$dark-accent: mat.define-palette(mat.$indigo-palette, A200, A100, A400);
// The warn palette is optional (defaults to red).
$warn: mat.define-palette(mat.$red-palette);

$dark-theme: mat.define-dark-theme((color: (primary: $dark-primary,
        accent: $dark-accent,
        warn: $warn,
      )));


// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$light-theme: mat.define-light-theme((color: (primary: $light-primary,
        accent: $light-accent,
        warn: $warn,
      )));


@mixin elevation($theme) {
  $color-config: mat.get-color-config($theme);

  $primary-palette: map.get($color-config, primary);
  $accent-palette: map.get($color-config, accent);
  $background-palette: map.get($color-config, background);

  // TODO: Unused
  .elevator {
    @include mat.elevation-transition();
    @include mat.elevation(8, mat.get-color-from-palette($accent-palette, default));

    &:hover {
      @include mat.elevation(16, mat.get-color-from-palette($accent-palette, default));
    }
  }
}

@include mat.all-component-themes($dark-theme);
@include blog.theme($dark-theme);
@include elevation($dark-theme);

.light-theme {
  @include mat.all-component-colors($light-theme);
  @include blog.theme($light-theme);
  @include elevation($light-theme);
}
